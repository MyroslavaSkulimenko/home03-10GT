First level: (1) Коротко опишите, какие задачи с помощью механизма ветвления решаются в GIT? Зачем выполняется их слияние?
Использование ветвления позволяет решать отдельные самостоятельные задачи, не вмешиваясь в основную линию разработки. 
Слияние используется в Git, чтобы собрать воедино разветвленную историю. Команда git merge выполняет слияние отдельных направлений разработки, созданных с помощью команды git branch, в единую ветку.

Обратите внимание: все приведенные ниже команды выполняют слияние в текущую ветку, в то время как целевая ветка остается без изменений. Поэтому команда git merge часто используется в сочетании с командами git checkout (для выбора текущей ветки) и git branch -d (для удаления устаревшей целевой ветки).

Ветка в Git — это последовательность коммитов. С технической точки зрения ветка — это указатель или ссылка на последний коммит в этой ветке. По умолчанию, имя основной ветки в Git — master. Каждый раз, когда создается новый коммит, указатель ветки master автоматически передвигается на него.
Источник: https://fuzeservers.ru/programming/udalit-konkretnyj-kommit.html

(2) Укажите команды для:
2.1 переименования веток;
  1) переименовать ветку локально -  git branch --move (старое имя) (новое имя).
  2) git push --set-upstream origin (новое имя).
  3) git push origin --delete (старое имя) - удалит на удаленном сервере.
2.2 создания и переключения на новую ветку;
- Для создания ветки - командой git branch (имя ветки.)
git branch - без параметров - покажет список веток.
git branch -v - покажет последний коммит на каждой из веток.
- Для переключения на существующую ветку  команда - git checkout (___имя ветки_).
Переключение веток меняет файлы в рабочем каталоге
Важно запомнить, что при переключении веток в Git происходит изменение файлов в рабочем каталоге. Если  переключится на старую ветку, то рабочий каталог будет выглядеть так же, как выглядел на момент последнего коммита в ту ветку.
Для отображения истории коммитов, текущего положения указателей веток и истории ветвления  команда - git log --oneline --decorate --graph --all.
Одновременное создание новой ветки и переключение на неё - git checkout -b <newbranchname>.
2.3 удаление ветки;
 - git branch -d - можно удалить ветку без  *, наработки из этих веток уже включены в другую ветку, так что ничего не потеряется.
 - git branch --no-merged, чтобы увидеть все ветки, содержащие наработки, которые ещё не слили в текущую ветку.
   git branch -D, если вы действительно хотите удалить ветку вместе со всеми наработками.
2.4 слияния веток.
 - git merge (имя ветки, кот влививается), при этом важно находиться на  ветке в которую происходит слияние.
git checkout master
git merge ()